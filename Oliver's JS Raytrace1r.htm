<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0038)https://nerget.com/rayjs-mt/rayjs.html -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
         <TITLE>Oliver's JS Raytracer</TITLE>         
<META http-equiv="Content-Type" content="text/html; charset=gb2312">
<SCRIPT>
            var noImageData = false;
            var numWorkers = 4;
            var blockSize = 20;
            var canvasSize = 400;
            var goImmediately = false;
            var reuseWorkers = true;
            var vsync = true;
            if (Object.defineProperty)
                Object.defineProperty(window, "go", {get: function(){ goImmediately = true; }})
            else
                window.__defineGetter__("go", function(){ goImmediately = true; });
            (function(){
                try {             
                    eval(window.location.search.toString().substring(1));
                } catch (e) {}
            })();
            window.onload = function () {
                controls = document.getElementById("controls");
                workerCount = document.createElement("select");
                workerCount.id = "workerCount";
                if (window.Worker) {
                    for (var i = 1; i <= 16; ++i) {
                        var opt = document.createElement("option");
                        opt.value = i;
                        opt.appendChild(document.createTextNode(i));
                        workerCount.appendChild(opt);
                    }
                    var opt = document.createElement("option");
                    opt.value = 0;
                    opt.appendChild(document.createTextNode("disabled"));
                    workerCount.appendChild(opt);
                    workerCount.value = numWorkers;
                } else {
                    workerCount.disabled = true;
                    var opt = document.createElement("option");
                    opt.value = 0;
                    opt.appendChild(document.createTextNode("no workers"));
                    workerCount.appendChild(opt);
                }
                var workerCountLabel = document.createElement("label");
                workerCountLabel.appendChild(document.createTextNode("Number of Workers:"));
                workerCountLabel.setAttribute("for", "workerCount");
                controls.insertBefore(workerCountLabel, document.getElementById("renderButton"));
                controls.insertBefore(workerCount, document.getElementById("renderButton"));
                useImageData = document.createElement("input");
                useImageData.type="checkbox";
                var supportsImageData = window.CanvasRenderingContext2D && CanvasRenderingContext2D.prototype.putImageData;
                useImageData.checked = supportsImageData;

                if (supportsImageData){
                    var useImageDataLabel = document.createElement("label");
                    useImageDataLabel.appendChild(document.createTextNode("Use ImageData API:"));
                    useImageDataLabel.setAttribute("for", "useImageData");
                    useImageData.id = "useImageData";
                    controls.insertBefore(useImageDataLabel, document.getElementById("renderButton"));
                    controls.insertBefore(useImageData, document.getElementById("renderButton"));
                }
                
                
                var canvas = document.getElementById("renderCanvas");
                canvas.width = canvasSize;
                canvas.height = canvasSize;
                if (goImmediately) render();
            }
        </SCRIPT>
         
<SCRIPT src="Oliver's%20JS%20Raytrace1r_files/jobqueue.js"></SCRIPT>
         
<SCRIPT src="Oliver's%20JS%20Raytrace1r_files/rtstructs.js"></SCRIPT>
         
<SCRIPT src="Oliver's%20JS%20Raytrace1r_files/renderer.js"></SCRIPT>
         
<SCRIPT src="Oliver's%20JS%20Raytrace1r_files/scene.js"></SCRIPT>
         
<STYLE type="text/css">html*#canvasError { display: none; }</STYLE>
     
<META name="GENERATOR" content="MSHTML 11.00.9600.17915"></HEAD>     
<BODY><CANVAS width="400" height="400" id="renderCanvas">
<DIV id="canvasError">You need a browser that supports DOM Canvas to view this 
demo, such as Safari (or any other WebKit based browser), or more or less any 
other non-IE browser </DIV></CANVAS><BR>
<DIV id="console"></DIV>
<SCRIPT>
            function log(str) {
               var console = document.getElementById("console");
               console.appendChild(document.createTextNode(str + '\n'));
            }
            var rendering = false;
            var angle = 0;
            var queue;
            var lastWorkerCount = -1;
            function render(profile) {
				if (rendering)
				    return;
				var renderButton = document.getElementById("renderButton");
				renderButton.innerText = "Cancel";
				renderButton.onclick = function() {
			        renderButton.disabled = true;
					renderButton.innerText = "Cancelling...";
				    queue.stop(function() {
    			        renderButton.disabled = false;
    					rendering = false;
    					renderButton.innerText = "Go!";
    					renderButton.onclick = render;
				    });
				};
				rendering = true;
				var startDate = new Date().getTime();
				var canvasElem = document.getElementById("renderCanvas");
				var _canvas = canvasElem.getContext("2d");
				var _camera = new Camera([-40*Math.sin(angle), 30 + 10 * Math.sin(angle*1.2), 40*Math.cos(angle)], [0, 0, 0], [0, 1, 0]);
				_camera.onFinished = function() {
					var deltaTime = new Date().getTime() - startDate;
					rendering = false;
					renderButton.onclick = render;
					if (!window.animate) {
    					log("Time taken: " + deltaTime/1000 + "s");
    					renderButton.innerText = "Go!";
    				}  else {
    				    angle+=0.1;
    				    setTimeout(render, 10);
				    }
    				    
				};
				queue = (workerCount.value === lastWorkerCount && reuseWorkers) ? queue : new JobQueue(workerCount.value);
				lastWorkerCount = workerCount.value;
				_camera.render(queue, createScene, _canvas, canvasElem.width, canvasElem.height,
				               useImageData.checked);
            }
        </SCRIPT>
         <BR>
<DIV id="controls"><BUTTON id="renderButton" onclick="render()">Go!</BUTTON>     
    </DIV></BODY></HTML>
